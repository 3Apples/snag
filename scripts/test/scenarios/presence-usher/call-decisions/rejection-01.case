#########################################################
#
# Scenario:
#	- 2 agents, Lokpal and KshetraPal become available
#	- caller Tara calls
#	- Lokpal rejects the call
#
# Expected Result:
#	- Kshetrapal should get the call
#
#########################################################

#
# Presence Information
#
$pres_host       << "localhost"
$pres_port       << 4000
$pres_id         << "p01"
$presence_aep    << (($pres_id + "=presence"))

#
# Usher Information
#
$usher_id        << "SUZIEQ"

#
# Lobby Information
#
$lobby_id        << "lobster"
$lobby_aep       << (($lobby_id + "=lobby"))

#
# Agent Information
#
$g_tibet         << "the-protectors"
$lok_id          << "lokpal"
$kshetra_id      << "kshetrapal"
$token           << "abcd"

#
# Caller Information
#
$caller          << "tara"
$tara_aep        << ((`${$caller}=user,${$lobby_aep}`))

#
# REST Commands
#
$usher_http      << rest-init usher id $usher_id
$pres_http       << rest-init presence id $pres_id host "localhost" port "4002"

#
# Open presence RX broadcast channel
#
nats-init

#
# Setup callbacks for expected incoming messages
#
on-message socket id $lok_id msg-id "PLEASE-CALL"
	- ack socket status "not-ok" reason "don-t feel like taking a call right now"

on-message socket id $kshetra_id msg-id "PLEASE-CALL"
	- ack socket status "ok"
	- ACCEPT-CALL delay 200  agent user $lok call_id $msg.payload.id
	- END-CALL    delay 1000 agent user $lok call_id $msg.payload.id
	- DISCONNECT  delay 1000 user $lok
	- exit

#
# Agents registering
#
$lok     << CONNECT presence host $pres_host port $pres_port node-id $pres_id user-id $lok_id     group $g_tibet
$kshetra << CONNECT presence host $pres_host port $pres_port node-id $pres_id user-id $kshetra_id group $g_tibet

AUTHENTICATE    user $lok     token $token
AUTHENTICATE    user $kshetra token $token
WHOS-MY-USHER   user $lok
WHOS-MY-USHER   user $kshetra
AGENT-AVAILABLE user $lok
AGENT-AVAILABLE user $kshetra

#
# Assert that presence has just 1 group
#
sleep 200
rest-get show-response node $pres_http path "/diagnostics/groups"
assert ((Object.keys ($response).length == 1))
assert (($response[$g_tibet].total == 2))

#
# Lobby enqueueing a call
#
WHO-HAS from $lobby_aep group $g_tibet
ENQUEUE-CALL show-response from $tara_aep  group $g_tibet channel $response.payload.channel

wait-for-exit
